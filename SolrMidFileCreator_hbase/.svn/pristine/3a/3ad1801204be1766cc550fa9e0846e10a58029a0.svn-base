package com.hisign.solr;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.collections.map.MultiValueMap;
import org.apache.tika.exception.TikaException;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.AutoDetectParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.sax.BodyContentHandler;

import com.hankcs.hanlp.corpus.tag.Nature;
import com.hankcs.hanlp.seg.common.Term;

public class DataImportUtils
{
    /*
     * extract file extension part from path
     */
    public static String getExtensionName(String filename)
    {
        if ((filename != null) && (filename.length() > 0))
        {
            int dot = filename.lastIndexOf('.');
            if ((dot > -1) && (dot < (filename.length() - 1)))
            {
                return filename.substring(dot + 1);
            }
        }
        return filename;
    }

    /*
     * extract file name without extension
     */
    public static String getFileNameNoEx(String filename)
    {
        if ((filename != null) && (filename.length() > 0))
        {
            int dot = filename.lastIndexOf('.');
            if ((dot > -1) && (dot < (filename.length())))
            {
                return filename.substring(0, dot);
            }
        }
        return filename;
    }

    /**
     * 匹配身份证号码(不做校验码运算)
     * 
     * @param strTerm
     * @return 是否合理的身份证号码
     */
    public static boolean matchIdCardNo(String strTerm)
    {
        Pattern p = null;
        Matcher m = null;
        boolean b = false;

        if (strTerm.length() == 17)
        {
            strTerm += "X";
        }

        if (strTerm.length() == 18)
        {
            p = Pattern.compile("^[1-9]\\d{5}(19|20)\\d{2}((0[1-9])|(1[0-2]))((0[1-9]|[1|2]\\d)|3[0-1])\\d{3}(\\d|X)$");
            m = p.matcher(strTerm);
            b = m.matches();
        }
        else if (strTerm.length() == 15)
        {
            p = Pattern.compile("^[1-9]\\d{7}((0[1-9])|(1[0-2]))((0[1-9]|[1|2]\\d)|3[0-1])\\d{3}$");
            m = p.matcher(strTerm);
            b = m.matches();
        }

        return b;
    }

    /**
     * only office file or text can be processed by tika
     * 
     * @param file
     *            name to be judge type from extension
     * @return is supported format
     */
    public static boolean isProcessableFile(File file)
    {
        String fileExt = getExtensionName(file.getName());
        if (fileExt.equalsIgnoreCase("doc") || fileExt.equalsIgnoreCase("docx") || fileExt.equalsIgnoreCase("xls")
                || fileExt.equalsIgnoreCase("xlsx") || fileExt.equalsIgnoreCase("ppt")
                || fileExt.equalsIgnoreCase("pptx") || fileExt.equalsIgnoreCase("csv")
                || fileExt.equalsIgnoreCase("pdf") || fileExt.equalsIgnoreCase("txt"))
        {
            return true;
        }
        return false;
    }

    public static boolean IsEmailSeg(String segToCheck)
    {
        String check = "^[_.0-9a-zA-Z-]+$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(segToCheck);
        return matcher.matches();
    }

    public static boolean IsEmailFormat(String segToCheck)
    {
        String check = "^([0-9a-zA-Z]+[_.0-9a-zA-Z-]+)@([a-zA-Z0-9-]+[.])+([a-zA-Z]{2,3})$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(segToCheck);
        return matcher.matches();
    }

    /**
     * judge the validation of bank card
     * 
     * @param numString
     *            number string to be validated
     * @return true for valid bank card number
     */
    public static boolean IsBankCardNum(String numString)
    {
        if (numString.length() < 12 || numString.length() > 19)
        {
            return false;
        }
        // China UnionPay start with 62, 16 ~ 19 length, no validation
        // algorithm.
        String check = "^(62)\\d{14}\\d?\\d?\\d?$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(numString);
        if (matcher.matches())
        {
            return true;
        }

        //
        check = "^(2014|2149)\\d{11}$";
        regex = Pattern.compile(check);
        matcher = regex.matcher(numString);
        if (matcher.matches())
        {
            return true;
        }

        char bit = getBankCardCheckCode(numString.substring(0, numString.length() - 1));
        if (bit == 'N')
        {
            return false;
        }
        return numString.charAt(numString.length() - 1) == bit;
    }

    /**
     * 从不含校验位的银行卡卡号采用 Luhm 校验算法获得校验位
     * 
     * @param nonCheckCodeCardId
     * @return
     */
    public static char getBankCardCheckCode(String nonCheckCodeCardId)
    {
        if (nonCheckCodeCardId == null || nonCheckCodeCardId.trim().length() == 0
                || !nonCheckCodeCardId.matches("\\d+"))
        {
            // 如果传的不是数据返回N
            return 'N';
        }
        char[] chs = nonCheckCodeCardId.trim().toCharArray();
        int luhmSum = 0;
        for (int i = chs.length - 1, j = 0; i >= 0; i--, j++)
        {
            int k = chs[i] - '0';
            if (j % 2 == 0)
            {
                k *= 2;
                k = k / 10 + k % 10;
            }
            luhmSum += k;
        }
        return (luhmSum % 10 == 0) ? '0' : (char) ((10 - luhmSum % 10) + '0');
    }

    public static boolean IsValidPlateNum(String stringToCheck)
    {
        String check = "^[\u4e00-\u9fa5]{1}[a-zA-Z]{1}[a-zA-Z_0-9]{5}$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(stringToCheck);
        return matcher.matches();
    }

    public static boolean IsPossibleTeleNum(String stringToCheck)
    {
        String check = "^[0]\\d{8,11}$|^[1-9]\\d{5,7}$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(stringToCheck);
        return matcher.matches();
    }

    /**
     * 发动机验证
     * 
     * @param stringToCheck
     *            stringToCheck
     * @return
     */
    public static String GetEngineNum(String extraceSrc)
    {
        Pattern regex = Pattern.compile("[a-zA-Z0-9 ]{5,18}");
        Matcher matcher = regex.matcher(extraceSrc);
        return matcher.find() ? matcher.group() : "";
    }

    /**
     * QQ号验证
     * 
     * @param numToCheck
     *            numToCheck
     * @return
     */
    public static boolean IsQQNumPossible(String numToCheck)
    {
        String check = "^[1-9]\\d{4,11}$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(numToCheck);
        return matcher.matches();
    }

    /**
     * 提取微信号
     * 
     * @param extraceSrc
     * @return
     */
    public static String GetWeChatNumber(String extraceSrc)
    {
        Pattern regex = Pattern.compile("[a-zA-Z]{1}[a-zA-Z0-9_-]{3,20}");
        Matcher matcher = regex.matcher(extraceSrc);
        return matcher.find() ? matcher.group() : "";
    }

    /**
     * extract content to text string
     * 
     * @param file
     *            path name for the file to be extract content
     * @return file content or null
     */
    public static String fileToTxt(File file)
    {
        AutoDetectParser parser = new AutoDetectParser();
        BodyContentHandler handler = new BodyContentHandler(-1);
        InputStream inputStream = null;
        try
        {
            inputStream = new FileInputStream(file);
            Metadata metadata = new Metadata();
            System.out.println(file.getAbsolutePath());
            parser.parse(inputStream, handler, metadata, new ParseContext());
            inputStream.close();
            return handler.toString();
        }
        catch (TikaException e)
        {
            e.printStackTrace();
            if (e.getCause() instanceof IllegalArgumentException)
            {
                return null;
            }
            else
            {
                return "";
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return "";
        }
        finally
        {
            if (null != inputStream)
            {
                try
                {
                    inputStream.close();
                }
                catch (IOException e1)
                {
                    //e1.printStackTrace();
                }
            }
        }
    }
    
    public static MultiValueMap extractNamingEntity(List<Term> termList)
    {
        MultiValueMap segMap = new MultiValueMap();
        for (int index = 0; index < termList.size(); ++index)
        {
            Term term = termList.get(index);
            switch (term.nature)
            {
            case n:
                if (term.word.startsWith("微信"))
                {
                    int checkPos = 1;
                    int frontIndex = index;
                    StringBuffer tmpData = new StringBuffer();
                    while (tmpData.toString().length() < 30 && index + checkPos < termList.size())
                    {
                        if(termList.get(index + checkPos).offset <
                                termList.get(frontIndex).offset +
                                termList.get(frontIndex).word.length())
                        {
                            ++checkPos;
                            continue;
                        }
                        tmpData.append(termList.get(index + checkPos).word);
                        frontIndex = index + checkPos;
                        ++checkPos;
                    }
                    String extract = DataImportUtils.GetWeChatNumber(tmpData.toString());
                    if (extract.length() > 3)
                    {
                        segMap.put("wechatnum", extract);
                        int step = 1;
                        while(index + step < termList.size()&&
                                term.offset + term.length() + extract.length() <
                                termList.get(index + step).offset)
                        {
                            ++step;
                        }
                        index += (step - 1);
                    }
                }
                else if (term.word.startsWith("发动机"))
                {
                    int checkPos = 1;
                    int frontIndex = index;
                    StringBuffer tmpData = new StringBuffer();
                    while (tmpData.toString().length() < 25 && index + checkPos < termList.size())
                    {
                        if(termList.get(index + checkPos).offset <
                                termList.get(frontIndex).offset +
                                termList.get(frontIndex).word.length())
                        {
                            ++checkPos;
                            continue;
                        }
                        
                        if (tmpData.toString().length() > 6
                                && termList.get(index + checkPos).nature.toString().startsWith("w"))
                        {
                            break;
                        }
                        tmpData.append(termList.get(index + checkPos).word);
                        frontIndex = index + checkPos;
                        ++checkPos;
                    }
                    String extract = DataImportUtils.GetEngineNum(tmpData.toString());
                    if (extract.length() > 5)
                    {
                        segMap.put("enginenum", extract);
                        int step = 1;
                        while(index + step < termList.size()&&
                                term.offset + term.length() + extract.length() <
                                termList.get(index + step).offset)
                        {
                            ++step;
                        }
                        index += (step - 1);
                    }
                }
                break;
            case nr:
            case nrj:
            case nrf:
            case nr1:
            case nr2:
                if(term.word.length() > 1 && !term.word.startsWith("，"))
                {
                    segMap.put("name", term.word);
                }
                break;
            case ns:
            case nsf:
                segMap.put("location", term.word);
                break;
            case nt:
            case nto:
            case ntu:
            case nts:
            case nth:
            case ntc:
            case ntcf:
            case ntcb:
            case ntch:
            case nis:
                if (term.word.startsWith("微信号"))
                {
                    int checkPos = 1;
                    int frontIndex = index;
                    StringBuffer tmpData = new StringBuffer();
                    while (tmpData.toString().length() < 30 && index + checkPos < termList.size())
                    {
                        if(termList.get(index + checkPos).offset <
                                termList.get(frontIndex).offset +
                                termList.get(frontIndex).word.length())
                        {
                            ++checkPos;
                            continue;
                        }
                        tmpData.append(termList.get(index + checkPos).word);
                        frontIndex = index + checkPos;
                        ++checkPos;
                    }
                    String extract = DataImportUtils.GetWeChatNumber(tmpData.toString());
                    if (extract.length() > 3)
                    {
                        segMap.put("wechatnum", extract);
                        int step = 1;
                        while(index + step < termList.size()&&
                                term.offset + term.length() + extract.length() <
                                termList.get(index + step).offset)
                        {
                            ++step;
                        }
                        index += (step - 1);
                    }
                }
                else
                {
                    segMap.put("organization", term.word);
                }
                break;
            case nf:
            case gp:
                segMap.put("goods", term.word);
                break;
            case m:
                if (term.word.length() == 11 && term.word.startsWith("1"))
                {
                    segMap.put("mobilenum", term.word);
                }
                else if ((term.word.length() == 17 || term.word.length() == 18 || term.word.length() == 15)
                        && DataImportUtils.matchIdCardNo(term.word))
                {
                    if (term.word.length() == 17)
                    {
                        segMap.put("idnum", term.word + "X");
                    }
                    else
                    {
                        segMap.put("idnum", term.word);
                    }
                }
                else if ((term.word.length() == 6 // no zone number
                        || term.word.length() == 7 // no zone number
                        || term.word.length() == 8 // no zone number
                        || ((term.word.length() == 11 // with zone number
                                || term.word.length() == 10 // with zone number
                                || term.word.length() == 12) // with zone number
                                && term.word.startsWith("0")))
                        && DataImportUtils.IsPossibleTeleNum(term.word))
                {
                    segMap.put("telenum", term.word);
                }
                else if ((term.word.length() == 16 || term.word.length() == 17 || term.word.length() == 18
                        || term.word.length() == 19) && DataImportUtils.IsBankCardNum(term.word))
                {
                    segMap.put("bankcard", term.word);
                }
                else if (term.word.length() == 4)
                {
                    if ((index + 6 < termList.size()
                            && DataImportUtils.IsBankCardNum(term.word + termList.get(index + 2).word
                                    + termList.get(index + 4).word + termList.get(index + 6).word)))
                    {
                        segMap.put("bankcard", term.word + termList.get(index + 2).word + termList.get(index + 4).word
                                + termList.get(index + 6).word);
                        index += 6;
                    }
                    else if ((index + 8 < termList.size() && DataImportUtils
                            .IsBankCardNum(term.word + termList.get(index + 2).word + termList.get(index + 4).word
                                    + termList.get(index + 6).word + termList.get(index + 8).word)))
                    {
                        segMap.put("bankcard", term.word + termList.get(index + 2).word + termList.get(index + 4).word
                                + termList.get(index + 6).word + termList.get(index + 8).word);
                        index += 8;
                    }
                }

                break;
            case nx:
                if ( term.word.indexOf("@") != -1)
                {
                    String mailString = new String();

                    int checkPos = 1;
                    while (index - checkPos > 0 && DataImportUtils.IsEmailSeg(termList.get(index - checkPos).word))
                    {
                        mailString = termList.get(index - checkPos).word + mailString;
                        ++checkPos;
                    }
                    mailString = mailString + term.word;
                    if(mailString.endsWith("\n"))
                    {
                        while(mailString.endsWith("\n"))
                        {
                            mailString = mailString.substring(0, (mailString.length() - 1));                     
                        }
                    }
                    else
                    {
                        checkPos = 1;
                        while (index + checkPos < termList.size())
                        {
                            String wordInList = termList.get(index + checkPos).word;
                            while(wordInList.endsWith("\n"))
                            {
                                wordInList = wordInList.substring(0, (wordInList.length() - 1));
                            }
                            
                            if(DataImportUtils.IsEmailSeg(wordInList))
                            {
                                mailString = mailString + wordInList;
                                ++checkPos;
                            }
                            else
                            {
                                break;
                            }
                        }                        
                    }

                    if (DataImportUtils.IsEmailFormat(mailString))
                    {
                        segMap.put("email", mailString);
                        index += (checkPos - 1);
                    }
                }
                else if (term.word.indexOf("qq") != -1 || term.word.indexOf("QQ") != -1)
                {
                    int checkPos = 1;
                    while (checkPos < 4 && index + checkPos < termList.size())
                    {
                        if (termList.get(index + checkPos).nature == Nature.m)
                        {
                            if (DataImportUtils.IsQQNumPossible(termList.get(index + checkPos).word))
                            {
                                segMap.put("QQnum", termList.get(index + checkPos).word);
                            }
                            index += checkPos;
                            break;
                        }
                        ++checkPos;
                    }
                }
                break;
            case b:
                if(!term.word.startsWith("鄂"))
                {
                    break;
                }            
            case j:            
                StringBuffer tmpString = new StringBuffer();
                tmpString.append(term.word);
                int checkPos = 1;
                int flagCount = 0;
                while (tmpString.toString().length() < 7 && index + checkPos < termList.size() && flagCount < 3)
                {
                    if (termList.get(index + checkPos).nature.toString().startsWith("w"))
                    {
                        ++flagCount;
                    }
                    else
                    {
                        tmpString.append(termList.get(index + checkPos).word);
                    }
                    ++checkPos;
                }

                if (DataImportUtils.IsValidPlateNum(tmpString.toString()))
                {
                    segMap.put("platenum", tmpString.toString());
                    index += checkPos;
                }
                break;
            case nnt:
                segMap.put("occupation", term.word);
                break;
            case xu:
                if(term.word.length() > 5 && !term.word.startsWith("..."))
                {
                    segMap.put("webaddr", term.word);
                }
                break;
            case nz:
                segMap.put("rawstr", term.word);
                break;
            default:
                /*if(!term.nature.toString().startsWith("w") 
                        && !term.nature.toString().startsWith("q")
                        && !term.nature.toString().startsWith("a")
                        && !term.nature.toString().startsWith("uj")
                        && !term.nature.toString().startsWith("c")
                        && !term.nature.toString().startsWith("d")
                        && !term.nature.toString().startsWith("v"))
                {
                    System.out.println(term.nature.toString() + ": " + term.word);
                }*/
                break;
            }
        }
        return segMap;
    }
}


